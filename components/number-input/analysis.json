{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "`number-input` is an element that can:\n* prevent non numeric input\n* guarantee **live**-data to be valid\n* pad a value with `0` (to a specific length)\n* size the input (according to it's length)\n* overflow to minimum or underflow to maximum\n* saturate to minimum or to maximum\n* display a specified unit and size the input\n* specify the decimal separator (the value will still be a Number object)\n* use percent-format\n\nExample:\n```html\n<number-input step=\"2\" min=\"-20\" max=\"140\" pad-length=\"2\"></number-input>\n```\n\nIt sizes automatically. Use `key-up` and `key-down` to increment the value. If `step` is given, the value is a **multiple** of `step`.\n\n### Styling\nCustom property                   | Description                                    | Default\n----------------------------------|------------------------------------------------|--------------------\n`--input-color`                   | color of the input                             | inherit\n`--input-background`              | background of the input                        | transparent\n`--input-border-width`            | border width of the input                      | thin\n`--input-border-style`            | border style of the input                      | dotted\n`--input-border-color`            | border color of the input                      | transparent\n`--input-padding`                 | padding of the input                           | 0.2em\n`--input-border-radius`           | border-radius of the input                     | 0.25em\n`--input-transition`              | transition of the input                        | background 250ms cubic-bezier(0.6, 1, 0.2, 1)\n`--input-allign`                  | text-allign of the input input                 | center\n`--input-cursor`                  | cursor of the input input                      | initial\n`--input-focus-color`             | color of the focussed and hovered input        | inherit\n`--input-focus-background`        | background of the focussed and hovered input   | rgba(0, 0, 0, 0.16)\n`--input-focus-border-style`      | border style of the focussed and hovered input | dotted\n`--input-focus-border-color`      | border color of the focussed and hovered input | currentColor\n`--input-invalid-color`           | color of the invalid input                     | inherit\n`--input-invalid-background`      | background of the invalid input                | rgba(255, 0, 0, 0.16)\n`--input-invalid-border-style`    | border style of the invalid input              | dotted\n`--input-invalid-border-color`    | border color of the invalid input              | rgba(255, 0, 0, 0.5)\n`--input-disabled-color`          | color of the disabled input                    | inherit\n`--input-disabled-background`     | background of the disabled input               | transparent\n`--input-disabled-font-style`     | font-style of the disabled input               | italic\n`--input-disabled-opacity`        | opacity of the disabled input                  | 1\n`--input-placeholder-color`       | color of the placeholder                       | inherit\n`--input-placeholder-opacity`     | opacity of the placeholder                     | 0.75\n`--input-selection-color`         | color of the selected text                     | inherit\n`--input-selection-background`    | background of the selected text                | rgba(255, 255, 255, 0.5)\n`--input-style`                   | style of the input                             | {}\n`--input-focus`                   | style of the focussed and hovered input        | {}\n`--input-invalid`                 | style of the invalid input                     | {}\n`--input-placeholder`             | style of the placeholder                       | {}\n\n```css\n number-input {\n  --input-disabled-color: grey;\n  --input-focus-background: rgba(0,0,0,0.3);\n  --input-focus: {\n    font-weight: bold;\n  };\n  --input-placeholder: {\n    color: pink;\n  };\n}\n```",
      "summary": "",
      "path": "number-input.html",
      "properties": [
        {
          "name": "locale",
          "type": "string",
          "description": "The current locale",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 21,
              "column": 10
            },
            "end": {
              "line": 25,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "decimalSeparator",
          "type": "string",
          "description": "locale separator for local decimal values",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 30,
              "column": 10
            },
            "end": {
              "line": 34,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "groupingSeparator",
          "type": "string",
          "description": "locale separator for grouping decimal values",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 39,
              "column": 10
            },
            "end": {
              "line": 43,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "minimumFractionDigits",
          "type": "number",
          "description": "minimum digits right to the decimal separator",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 209,
              "column": 10
            },
            "end": {
              "line": 213,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "maximumFractionDigits",
          "type": "number",
          "description": "maximum digits right to the decimal separator",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 218,
              "column": 10
            },
            "end": {
              "line": 222,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "minimumIntegerDigits",
          "type": "number",
          "description": "minimum digits left to the decimal separator to pad",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 227,
              "column": 10
            },
            "end": {
              "line": 231,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "minimumSignificantDigits",
          "type": "number",
          "description": "The minimum number of significant digits to use. Possible values are from 1 to 21; the default is 1.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 69,
              "column": 10
            },
            "end": {
              "line": 71,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "maximumSignificantDigits",
          "type": "number",
          "description": "The maximum number of significant digits to use. Possible values are from 1 to 21; the default is minimumSignificantDigits.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 76,
              "column": 10
            },
            "end": {
              "line": 78,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "unit",
          "type": "string",
          "description": "unit of the output (only used when `number-style=\"decimal\"`)",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 83,
              "column": 10
            },
            "end": {
              "line": 85,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "unitSeparator",
          "type": "string",
          "description": "the separator to separate value and unit",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 90,
              "column": 10
            },
            "end": {
              "line": 93,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\" \"",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "alwaysSign",
          "type": "boolean",
          "description": "always put the sign at the beginning",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 154,
              "column": 10
            },
            "end": {
              "line": 157,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateValue\""
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "numberStyle",
          "type": "string",
          "description": "The formatting style to use. Possible values are \"decimal\" for plain number formatting, \"currency\" for currency formatting, and \"percent\" for percent formatting; the default is \"decimal\".\nnotice: min, max and step are not in percent (so e.g. if step is 0.01, it means that the step is 1%)",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 106,
              "column": 10
            },
            "end": {
              "line": 110,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "\"decimal\"",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "useGrouping",
          "type": "boolean",
          "description": "if true the number will be grouped according to the locale.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 115,
              "column": 10
            },
            "end": {
              "line": 117,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "currency",
          "type": "string",
          "description": "The currency to use in currency formatting. Possible values are the ISO 4217 currency codes, such as \"USD\" for the US dollar, \"EUR\" for the euro, or \"CNY\" for the Chinese RMB — see http://www.currency-iso.org/en/home/tables/table-a1.html. There is no default value; if the style is \"currency\", the currency property must be provided.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 122,
              "column": 10
            },
            "end": {
              "line": 124,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "currencyDisplay",
          "type": "string",
          "description": "How to display the currency in currency formatting. Possible values are \"symbol\" to use a localized currency symbol such as €, \"code\" to use the ISO currency code, \"name\" to use a localized currency name such as \"dollar\"; the default is \"symbol\".",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 129,
              "column": 10
            },
            "end": {
              "line": 131,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "_numberOptions",
          "type": "number",
          "description": "number format options",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 136,
              "column": 10
            },
            "end": {
              "line": 139,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "formatNumber",
          "type": "Function",
          "description": "number format function",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 144,
              "column": 10
            },
            "end": {
              "line": 148,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "parseNumber",
          "type": "Function",
          "description": "function to parse the input",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 153,
              "column": 10
            },
            "end": {
              "line": 157,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "_regExpNotInNumber",
          "type": "RegExp",
          "description": "Regular Expression for non numeric signs",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 162,
              "column": 10
            },
            "end": {
              "line": 166,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "defaultValue": "{}",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "min",
          "type": "number",
          "description": "minimal input",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 76,
              "column": 10
            },
            "end": {
              "line": 78,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "max",
          "type": "number",
          "description": "maximal input",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 83,
              "column": 10
            },
            "end": {
              "line": 85,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "step",
          "type": "number",
          "description": "step for changing the input (referencing to `min` or `0`)",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 91,
              "column": 10
            },
            "end": {
              "line": 94,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "1",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "stepMod",
          "type": "number",
          "description": "a step modifier. this is useful if you are having one step for multible elements that represent parts of numbers, like when you are having one input for the decimal part and one for the integer part.\nFor example:\n  * if `step` is `0.002` and the `step-mod` is `1000`, `2` will be used\n  * if `step` is `10` and the `step-mod` is `0.02`, `0.2` will be used",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 102,
              "column": 10
            },
            "end": {
              "line": 105,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "1",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_step",
          "type": "number",
          "description": "the used step, product of stepMod and step",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 111,
              "column": 10
            },
            "end": {
              "line": 114,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "1",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "value",
          "type": "Object",
          "description": "value of the input",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 50,
              "column": 10
            },
            "end": {
              "line": 53,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "default",
          "type": "number",
          "description": "default-value of the input",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 129,
              "column": 10
            },
            "end": {
              "line": 131,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "saturate",
          "type": "boolean",
          "description": "if true, the value does not revolve the range according to the maximum or the minimum",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 136,
              "column": 10
            },
            "end": {
              "line": 139,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateValue\""
            }
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "noClamp",
          "type": "boolean",
          "description": "if true, the value does not clamp according to the given step",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 144,
              "column": 10
            },
            "end": {
              "line": 147,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateValue\""
            }
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "required",
          "type": "boolean",
          "description": "required attribute",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 16,
              "column": 10
            },
            "end": {
              "line": 20,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "invalid",
          "type": "boolean",
          "description": "required attribute",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 25,
              "column": 10
            },
            "end": {
              "line": 29,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "disabled",
          "type": "boolean",
          "description": "disables the input",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 34,
              "column": 10
            },
            "end": {
              "line": 38,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "name",
          "type": "string",
          "description": "name of the input",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 43,
              "column": 10
            },
            "end": {
              "line": 45,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_valueIsSet",
          "type": "boolean",
          "description": "is true when the value is not undefined",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 58,
              "column": 10
            },
            "end": {
              "line": 61,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "propertyForValue",
          "type": "string",
          "description": "defines the property that should be used for the value",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 66,
              "column": 10
            },
            "end": {
              "line": 69,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_createReflectPropertyToValueObserver\""
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "padLength",
          "type": "number",
          "description": "length to pad the string (with `0`) according to the total amount of numbers",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 125,
              "column": 10
            },
            "end": {
              "line": 127,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "placeholder",
          "type": "string",
          "description": "placeholder string",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 133,
              "column": 10
            },
            "end": {
              "line": 135,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "noAutoWidth",
          "type": "boolean",
          "description": "if set `true`, the attributes `min`, `max`, `start-at` and `default` won't be used to compute a mininmal width. `minlenght` and `placeholder` will still be used.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 140,
              "column": 10
            },
            "end": {
              "line": 142,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "autoResize",
          "type": "boolean",
          "description": "if set `true`, the input will be resized when you type in, but always when you confirm the input (by moving out or pressing enter)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 147,
              "column": 10
            },
            "end": {
              "line": 149,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "autoPadding",
          "type": "boolean",
          "description": "enables auto padding",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 163,
              "column": 10
            },
            "end": {
              "line": 165,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "input",
          "type": "string",
          "description": "string value of the input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 170,
              "column": 10
            },
            "end": {
              "line": 174,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_inputChanged\""
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_input",
          "type": "string",
          "description": "live value of the input",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 179,
              "column": 10
            },
            "end": {
              "line": 181,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_minWidthString",
          "type": "string",
          "description": "string that is used to compute the minimal width of the input",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 186,
              "column": 10
            },
            "end": {
              "line": 189,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"resize\""
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "startAt",
          "type": "number",
          "description": "start where to increment the value",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 194,
              "column": 10
            },
            "end": {
              "line": 196,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "minlength",
          "type": "number",
          "description": "minimum character width of the input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 201,
              "column": 10
            },
            "end": {
              "line": 204,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "1",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_type",
          "type": "string",
          "description": "type of the input",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 236,
              "column": 10
            },
            "end": {
              "line": 239,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "hidden",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 241,
              "column": 10
            },
            "end": {
              "line": 244,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"resize\""
            }
          },
          "inheritedFrom": "NumberInputMixin"
        }
      ],
      "methods": [
        {
          "name": "_localeChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 176,
              "column": 6
            },
            "end": {
              "line": 234,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "locale"
            }
          ],
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "_computeNumberOptions",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 236,
              "column": 6
            },
            "end": {
              "line": 259,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "minimumIntegerDigits"
            },
            {
              "name": "minimumFractionDigits"
            },
            {
              "name": "maximumFractionDigits"
            },
            {
              "name": "minimumSignificantDigits"
            },
            {
              "name": "maximumSignificantDigits"
            },
            {
              "name": "useGrouping"
            },
            {
              "name": "style"
            },
            {
              "name": "currency"
            },
            {
              "name": "currencyDisplay"
            }
          ],
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "_computeFormatNumber",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 261,
              "column": 6
            },
            "end": {
              "line": 278,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "locale"
            },
            {
              "name": "numberOptions"
            },
            {
              "name": "unit"
            }
          ],
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "_computeParseNumber",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 280,
              "column": 6
            },
            "end": {
              "line": 302,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "decimalSeparator"
            },
            {
              "name": "numberStyle"
            },
            {
              "name": "useGrouping"
            }
          ],
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 254,
              "column": 6
            },
            "end": {
              "line": 265,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_minMaxChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 165,
              "column": 6
            },
            "end": {
              "line": 174,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "min"
            },
            {
              "name": "max"
            }
          ],
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_valueChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 372,
              "column": 6
            },
            "end": {
              "line": 393,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "oldValue"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_checkValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 187,
              "column": 6
            },
            "end": {
              "line": 219,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "oldValue"
            }
          ],
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_updateValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 400,
              "column": 6
            },
            "end": {
              "line": 403,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_checkStep",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 227,
              "column": 6
            },
            "end": {
              "line": 241,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "step"
            }
          ],
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_safeMult",
          "description": "emulating handwritten multiplication to keep precision",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 246,
              "column": 6
            },
            "end": {
              "line": 248,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a"
            },
            {
              "name": "b"
            }
          ],
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_safeAdd",
          "description": "emulating handwritten addition to keep precision",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 253,
              "column": 6
            },
            "end": {
              "line": 255,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a"
            },
            {
              "name": "b"
            }
          ],
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_stepChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 257,
              "column": 6
            },
            "end": {
              "line": 265,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "step"
            },
            {
              "name": "stepMod"
            }
          ],
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_computeInvalid",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 349,
              "column": 6
            },
            "end": {
              "line": 351,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "required"
            },
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeValueIsSet",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 89,
              "column": 6
            },
            "end": {
              "line": 91,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "validate",
          "description": "validates the input for iron-form",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 96,
              "column": 6
            },
            "end": {
              "line": 98,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_attachDom",
          "description": "attach dom with `delegatesFocus: true` so that the element is also focussed while its's children are too, and to autofocus to first tabable",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 103,
              "column": 6
            },
            "end": {
              "line": 112,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom"
            }
          ],
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_createReflectPropertyToValueObserver",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 114,
              "column": 6
            },
            "end": {
              "line": 119,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "prop"
            }
          ],
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_reflectPropertyToValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 121,
              "column": 6
            },
            "end": {
              "line": 123,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "v"
            }
          ],
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_reflectValueToProperty",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 125,
              "column": 6
            },
            "end": {
              "line": 127,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "v"
            }
          ],
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 267,
              "column": 6
            },
            "end": {
              "line": 270,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_addEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 272,
              "column": 6
            },
            "end": {
              "line": 277,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_removeEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 279,
              "column": 6
            },
            "end": {
              "line": 284,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "focus",
          "description": "focus the input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 289,
              "column": 6
            },
            "end": {
              "line": 292,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "blur",
          "description": "focus the input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 297,
              "column": 6
            },
            "end": {
              "line": 300,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_checkKeycode",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 302,
              "column": 6
            },
            "end": {
              "line": 329,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_increm",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 331,
              "column": 6
            },
            "end": {
              "line": 347,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "step"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_inputChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 353,
              "column": 6
            },
            "end": {
              "line": 370,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "input"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_checkInput",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 395,
              "column": 6
            },
            "end": {
              "line": 398,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeType",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 405,
              "column": 6
            },
            "end": {
              "line": 414,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "decimalSeparator"
            },
            {
              "name": "numberStyle"
            },
            {
              "name": "unit"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "resize",
          "description": "manually resize the minsize of the input, when the input is for example initially hidden",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 419,
              "column": 6
            },
            "end": {
              "line": 449,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_debouncedComputeWidth",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 451,
              "column": 6
            },
            "end": {
              "line": 457,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeWidth",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 459,
              "column": 6
            },
            "end": {
              "line": 461,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeMinWidth",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 463,
              "column": 6
            },
            "end": {
              "line": 473,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "noAutoWidth"
            },
            {
              "name": "formatNumber"
            },
            {
              "name": "placeholder"
            },
            {
              "name": "minlength"
            },
            {
              "name": "def"
            },
            {
              "name": "startAt"
            },
            {
              "name": "min"
            },
            {
              "name": "max"
            },
            {
              "name": "minimumIntegerDigits"
            },
            {
              "name": "minimumFractionDigits"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeMinimumIntegerDigits",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 475,
              "column": 6
            },
            "end": {
              "line": 499,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "autoPadding"
            },
            {
              "name": "padLength"
            },
            {
              "name": "def"
            },
            {
              "name": "startAt"
            },
            {
              "name": "min"
            },
            {
              "name": "max"
            },
            {
              "name": "step"
            },
            {
              "name": "numberStyle"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeMinimumFractionDigits",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 501,
              "column": 6
            },
            "end": {
              "line": 516,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "step"
            },
            {
              "name": "min"
            },
            {
              "name": "max"
            },
            {
              "name": "numberStyle"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeMaximumFractionDigits",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 518,
              "column": 6
            },
            "end": {
              "line": 523,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "minimumFractionDigits"
            },
            {
              "name": "noClamp"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        },
        {
          "url": "demo/form.html",
          "description": "Form Demo"
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 604,
          "column": 4
        },
        "end": {
          "line": 609,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "NumberInput",
      "attributes": [
        {
          "name": "locale",
          "description": "The current locale",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 21,
              "column": 10
            },
            "end": {
              "line": 25,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "decimal-separator",
          "description": "locale separator for local decimal values",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 30,
              "column": 10
            },
            "end": {
              "line": 34,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "grouping-separator",
          "description": "locale separator for grouping decimal values",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 39,
              "column": 10
            },
            "end": {
              "line": 43,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "minimum-fraction-digits",
          "description": "minimum digits right to the decimal separator",
          "sourceRange": {
            "start": {
              "line": 209,
              "column": 10
            },
            "end": {
              "line": 213,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "maximum-fraction-digits",
          "description": "maximum digits right to the decimal separator",
          "sourceRange": {
            "start": {
              "line": 218,
              "column": 10
            },
            "end": {
              "line": 222,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "minimum-integer-digits",
          "description": "minimum digits left to the decimal separator to pad",
          "sourceRange": {
            "start": {
              "line": 227,
              "column": 10
            },
            "end": {
              "line": 231,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "minimum-significant-digits",
          "description": "The minimum number of significant digits to use. Possible values are from 1 to 21; the default is 1.",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 69,
              "column": 10
            },
            "end": {
              "line": 71,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "maximum-significant-digits",
          "description": "The maximum number of significant digits to use. Possible values are from 1 to 21; the default is minimumSignificantDigits.",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 76,
              "column": 10
            },
            "end": {
              "line": 78,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "unit",
          "description": "unit of the output (only used when `number-style=\"decimal\"`)",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 83,
              "column": 10
            },
            "end": {
              "line": 85,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "unit-separator",
          "description": "the separator to separate value and unit",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 90,
              "column": 10
            },
            "end": {
              "line": 93,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "always-sign",
          "description": "always put the sign at the beginning",
          "sourceRange": {
            "start": {
              "line": 154,
              "column": 10
            },
            "end": {
              "line": 157,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "number-style",
          "description": "The formatting style to use. Possible values are \"decimal\" for plain number formatting, \"currency\" for currency formatting, and \"percent\" for percent formatting; the default is \"decimal\".\nnotice: min, max and step are not in percent (so e.g. if step is 0.01, it means that the step is 1%)",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 106,
              "column": 10
            },
            "end": {
              "line": 110,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "use-grouping",
          "description": "if true the number will be grouped according to the locale.",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 115,
              "column": 10
            },
            "end": {
              "line": 117,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "currency",
          "description": "The currency to use in currency formatting. Possible values are the ISO 4217 currency codes, such as \"USD\" for the US dollar, \"EUR\" for the euro, or \"CNY\" for the Chinese RMB — see http://www.currency-iso.org/en/home/tables/table-a1.html. There is no default value; if the style is \"currency\", the currency property must be provided.",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 122,
              "column": 10
            },
            "end": {
              "line": 124,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "currency-display",
          "description": "How to display the currency in currency formatting. Possible values are \"symbol\" to use a localized currency symbol such as €, \"code\" to use the ISO currency code, \"name\" to use a localized currency name such as \"dollar\"; the default is \"symbol\".",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 129,
              "column": 10
            },
            "end": {
              "line": 131,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "format-number",
          "description": "number format function",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 144,
              "column": 10
            },
            "end": {
              "line": 148,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Function",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "parse-number",
          "description": "function to parse the input",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 153,
              "column": 10
            },
            "end": {
              "line": 157,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Function",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "min",
          "description": "minimal input",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 76,
              "column": 10
            },
            "end": {
              "line": 78,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "max",
          "description": "maximal input",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 83,
              "column": 10
            },
            "end": {
              "line": 85,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "step",
          "description": "step for changing the input (referencing to `min` or `0`)",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 91,
              "column": 10
            },
            "end": {
              "line": 94,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "step-mod",
          "description": "a step modifier. this is useful if you are having one step for multible elements that represent parts of numbers, like when you are having one input for the decimal part and one for the integer part.\nFor example:\n  * if `step` is `0.002` and the `step-mod` is `1000`, `2` will be used\n  * if `step` is `10` and the `step-mod` is `0.02`, `0.2` will be used",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 102,
              "column": 10
            },
            "end": {
              "line": 105,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "value",
          "description": "value of the input",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 50,
              "column": 10
            },
            "end": {
              "line": 53,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "default",
          "description": "default-value of the input",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 129,
              "column": 10
            },
            "end": {
              "line": 131,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "saturate",
          "description": "if true, the value does not revolve the range according to the maximum or the minimum",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 136,
              "column": 10
            },
            "end": {
              "line": 139,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "no-clamp",
          "description": "if true, the value does not clamp according to the given step",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 144,
              "column": 10
            },
            "end": {
              "line": 147,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "required",
          "description": "required attribute",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 16,
              "column": 10
            },
            "end": {
              "line": 20,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "invalid",
          "description": "required attribute",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 25,
              "column": 10
            },
            "end": {
              "line": 29,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "disabled",
          "description": "disables the input",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 34,
              "column": 10
            },
            "end": {
              "line": 38,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "name",
          "description": "name of the input",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 43,
              "column": 10
            },
            "end": {
              "line": 45,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "property-for-value",
          "description": "defines the property that should be used for the value",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 66,
              "column": 10
            },
            "end": {
              "line": 69,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "pad-length",
          "description": "length to pad the string (with `0`) according to the total amount of numbers",
          "sourceRange": {
            "start": {
              "line": 125,
              "column": 10
            },
            "end": {
              "line": 127,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "placeholder",
          "description": "placeholder string",
          "sourceRange": {
            "start": {
              "line": 133,
              "column": 10
            },
            "end": {
              "line": 135,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "no-auto-width",
          "description": "if set `true`, the attributes `min`, `max`, `start-at` and `default` won't be used to compute a mininmal width. `minlenght` and `placeholder` will still be used.",
          "sourceRange": {
            "start": {
              "line": 140,
              "column": 10
            },
            "end": {
              "line": 142,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "auto-resize",
          "description": "if set `true`, the input will be resized when you type in, but always when you confirm the input (by moving out or pressing enter)",
          "sourceRange": {
            "start": {
              "line": 147,
              "column": 10
            },
            "end": {
              "line": 149,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "auto-padding",
          "description": "enables auto padding",
          "sourceRange": {
            "start": {
              "line": 163,
              "column": 10
            },
            "end": {
              "line": 165,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "input",
          "description": "string value of the input",
          "sourceRange": {
            "start": {
              "line": 170,
              "column": 10
            },
            "end": {
              "line": 174,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "start-at",
          "description": "start where to increment the value",
          "sourceRange": {
            "start": {
              "line": 194,
              "column": 10
            },
            "end": {
              "line": 196,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "minlength",
          "description": "minimum character width of the input",
          "sourceRange": {
            "start": {
              "line": 201,
              "column": 10
            },
            "end": {
              "line": 204,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "hidden",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 241,
              "column": 10
            },
            "end": {
              "line": 244,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "NumberInputMixin"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "number-input",
      "mixins": [
        "NumberInputMixin"
      ]
    },
    {
      "description": "`integer-input` is an element that can:\n* prevent non numeric input\n* guarantee **live**-data to be valid\n* pad a value with `0` (to a specific length)\n* size the input (according to it's length)\n* overflow to minimum or underflow to maximum\n* saturate to minimum or to maximum\n* display a specified unit and size the input\n\nExample:\n```html\n<integer-input step=\"2\" min=\"-20\" max=\"140\" pad-length=\"2\"></integer-input>\n```\n\nIt sizes automatically. Use `key-up` and `key-down` to increment the value. If `step` is given, the value is a **multiple** of `step`.\n\n### Styling\nCustom property                   | Description                                  | Default\n----------------------------------|----------------------------------------------|--------------------\n`--input-color`                   | color of the input                           | inherit\n`--input-background`              | background of the input                      | transparent\n`--input-border`                  | border of the input                          | thin dotted transparent\n`--input-padding`                 | padding of the input                         | 0.2em\n`--input-border-radius`           | border-radius of the input                   | 0.25em\n`--input-transition`              | transition of the input                      | background 250ms cubic-bezier(0.6, 1, 0.2, 1)\n`--input-allign`                  | text-allign of the input input               | center\n`--input-cursor`                  | cursor of the input input                    | initial\n`--input-focus-color`             | color of the focussed and hovered input      | inherit\n`--input-focus-background`        | background of the focussed and hovered input | rgba(0,0,0,0.16)\n`--input-focus-border`            | border of the focussed and hovered input     | thin dotted currentColor\n`--input-invalid-color`           | color of the invalid input                   | inherit\n`--input-invalid-background`      | background of the invalid input              | rgba(255,0,0,0.16)\n`--input-invalid-border`          | border of the invalid input                  | thin dotted rgba(255,0,0,0.5)\n`--input-disabled-color`          | color of the disabled input                  | inherit\n`--input-disabled-background`     | background of the disabled input             | transparent\n`--input-disabled-font-style`     | font-style of the disabled input             | italic\n`--input-disabled-opacity`        | opacity of the disabled input                | 1\n`--input-placeholder-color`       | color of the placeholder                     | inherit\n`--input-placeholder-opacity`     | opacity of the placeholder                   | 0.75\n`--input-selection-color`         | color of the selected text                   | inherit\n`--input-selection-background`    | background of the selected text              | rgba(255,255,255,0.5)\n`--input-style`                   | style of the input                           | {}\n`--input-focus`                   | style of the focussed and hovered input      | {}\n`--input-invalid`                 | style of the invalid input                   | {}\n`--input-placeholder`             | style of the placeholder                     | {}\n\n```css\n integer-input {\n  --input-disabled-color: grey;\n  --input-focus-background: rgba(0,0,0,0.3);\n  --input-focus: {\n    font-weight: bold;\n  };\n  --input-placeholder: {\n    color: pink;\n  };\n}\n```",
      "summary": "",
      "path": "integer-input.html",
      "properties": [
        {
          "name": "locale",
          "type": "string",
          "description": "The current locale",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 21,
              "column": 10
            },
            "end": {
              "line": 25,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "decimalSeparator",
          "type": "string",
          "description": "locale separator for local decimal values",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 30,
              "column": 10
            },
            "end": {
              "line": 34,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "groupingSeparator",
          "type": "string",
          "description": "locale separator for grouping decimal values",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 39,
              "column": 10
            },
            "end": {
              "line": 43,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "minimumFractionDigits",
          "type": "number",
          "description": "minimum digits right to the decimal separator",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 209,
              "column": 10
            },
            "end": {
              "line": 213,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "maximumFractionDigits",
          "type": "number",
          "description": "maximum digits right to the decimal separator",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 218,
              "column": 10
            },
            "end": {
              "line": 222,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "minimumIntegerDigits",
          "type": "number",
          "description": "minimum digits left to the decimal separator to pad",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 227,
              "column": 10
            },
            "end": {
              "line": 231,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "minimumSignificantDigits",
          "type": "number",
          "description": "The minimum number of significant digits to use. Possible values are from 1 to 21; the default is 1.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 69,
              "column": 10
            },
            "end": {
              "line": 71,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "maximumSignificantDigits",
          "type": "number",
          "description": "The maximum number of significant digits to use. Possible values are from 1 to 21; the default is minimumSignificantDigits.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 76,
              "column": 10
            },
            "end": {
              "line": 78,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "unit",
          "type": "string",
          "description": "unit of the output (only used when `number-style=\"decimal\"`)",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 83,
              "column": 10
            },
            "end": {
              "line": 85,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "unitSeparator",
          "type": "string",
          "description": "the separator to separate value and unit",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 90,
              "column": 10
            },
            "end": {
              "line": 93,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\" \"",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "alwaysSign",
          "type": "boolean",
          "description": "always put the sign at the beginning",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 154,
              "column": 10
            },
            "end": {
              "line": 157,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateValue\""
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "numberStyle",
          "type": "string",
          "description": "The formatting style to use. Is always `decimal` for `integer-input`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 22,
              "column": 10
            },
            "end": {
              "line": 27,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          },
          "defaultValue": "\"decimal\"",
          "inheritedFrom": "IntegerInputMixin"
        },
        {
          "name": "useGrouping",
          "type": "boolean",
          "description": "if true the number will be grouped according to the locale.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 115,
              "column": 10
            },
            "end": {
              "line": 117,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "currency",
          "type": "string",
          "description": "The currency to use in currency formatting. Possible values are the ISO 4217 currency codes, such as \"USD\" for the US dollar, \"EUR\" for the euro, or \"CNY\" for the Chinese RMB — see http://www.currency-iso.org/en/home/tables/table-a1.html. There is no default value; if the style is \"currency\", the currency property must be provided.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 122,
              "column": 10
            },
            "end": {
              "line": 124,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "currencyDisplay",
          "type": "string",
          "description": "How to display the currency in currency formatting. Possible values are \"symbol\" to use a localized currency symbol such as €, \"code\" to use the ISO currency code, \"name\" to use a localized currency name such as \"dollar\"; the default is \"symbol\".",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 129,
              "column": 10
            },
            "end": {
              "line": 131,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "_numberOptions",
          "type": "number",
          "description": "number format options",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 136,
              "column": 10
            },
            "end": {
              "line": 139,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "formatNumber",
          "type": "Function",
          "description": "number format function",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 144,
              "column": 10
            },
            "end": {
              "line": 148,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "parseNumber",
          "type": "Function",
          "description": "function to parse the input",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 153,
              "column": 10
            },
            "end": {
              "line": 157,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "_regExpNotInNumber",
          "type": "RegExp",
          "description": "Regular Expression for non numeric signs",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 162,
              "column": 10
            },
            "end": {
              "line": 166,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "defaultValue": "{}",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "min",
          "type": "number",
          "description": "minimal input",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 76,
              "column": 10
            },
            "end": {
              "line": 78,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "max",
          "type": "number",
          "description": "maximal input",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 83,
              "column": 10
            },
            "end": {
              "line": 85,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "step",
          "type": "number",
          "description": "step for changing the input (referencing to `min` or `0`)",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 91,
              "column": 10
            },
            "end": {
              "line": 94,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "1",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "stepMod",
          "type": "number",
          "description": "a step modifier. this is useful if you are having one step for multible elements that represent parts of numbers, like when you are having one input for the decimal part and one for the integer part.\nFor example:\n  * if `step` is `0.002` and the `step-mod` is `1000`, `2` will be used\n  * if `step` is `10` and the `step-mod` is `0.02`, `0.2` will be used",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 102,
              "column": 10
            },
            "end": {
              "line": 105,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "1",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_step",
          "type": "number",
          "description": "the used step, product of stepMod and step",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 111,
              "column": 10
            },
            "end": {
              "line": 114,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "1",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "value",
          "type": "Object",
          "description": "value of the input",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 50,
              "column": 10
            },
            "end": {
              "line": 53,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "default",
          "type": "number",
          "description": "default-value of the input",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 129,
              "column": 10
            },
            "end": {
              "line": 131,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "saturate",
          "type": "boolean",
          "description": "if true, the value does not revolve the range according to the maximum or the minimum",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 136,
              "column": 10
            },
            "end": {
              "line": 139,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateValue\""
            }
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "noClamp",
          "type": "boolean",
          "description": "if true, the value does not clamp according to the given step",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 144,
              "column": 10
            },
            "end": {
              "line": 147,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateValue\""
            }
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "required",
          "type": "boolean",
          "description": "required attribute",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 16,
              "column": 10
            },
            "end": {
              "line": 20,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "invalid",
          "type": "boolean",
          "description": "required attribute",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 25,
              "column": 10
            },
            "end": {
              "line": 29,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "disabled",
          "type": "boolean",
          "description": "disables the input",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 34,
              "column": 10
            },
            "end": {
              "line": 38,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "name",
          "type": "string",
          "description": "name of the input",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 43,
              "column": 10
            },
            "end": {
              "line": 45,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_valueIsSet",
          "type": "boolean",
          "description": "is true when the value is not undefined",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 58,
              "column": 10
            },
            "end": {
              "line": 61,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "propertyForValue",
          "type": "string",
          "description": "defines the property that should be used for the value",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 66,
              "column": 10
            },
            "end": {
              "line": 69,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_createReflectPropertyToValueObserver\""
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "padLength",
          "type": "number",
          "description": "length to pad the string (with `0`) according to the total amount of numbers",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 125,
              "column": 10
            },
            "end": {
              "line": 127,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "placeholder",
          "type": "string",
          "description": "placeholder string",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 133,
              "column": 10
            },
            "end": {
              "line": 135,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "noAutoWidth",
          "type": "boolean",
          "description": "if set `true`, the attributes `min`, `max`, `start-at` and `default` won't be used to compute a mininmal width. `minlenght` and `placeholder` will still be used.",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 140,
              "column": 10
            },
            "end": {
              "line": 142,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "autoResize",
          "type": "boolean",
          "description": "if set `true`, the input will be resized when you type in, but always when you confirm the input (by moving out or pressing enter)",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 147,
              "column": 10
            },
            "end": {
              "line": 149,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "autoPadding",
          "type": "boolean",
          "description": "enables auto padding",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 163,
              "column": 10
            },
            "end": {
              "line": 165,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "input",
          "type": "string",
          "description": "string value of the input",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 170,
              "column": 10
            },
            "end": {
              "line": 174,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_inputChanged\""
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_input",
          "type": "string",
          "description": "live value of the input",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 179,
              "column": 10
            },
            "end": {
              "line": 181,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_minWidthString",
          "type": "string",
          "description": "string that is used to compute the minimal width of the input",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 186,
              "column": 10
            },
            "end": {
              "line": 189,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"resize\""
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "startAt",
          "type": "number",
          "description": "start where to increment the value",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 194,
              "column": 10
            },
            "end": {
              "line": 196,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "minlength",
          "type": "number",
          "description": "minimum character width of the input",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 201,
              "column": 10
            },
            "end": {
              "line": 204,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "1",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_type",
          "type": "string",
          "description": "type of the input",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 236,
              "column": 10
            },
            "end": {
              "line": 239,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "hidden",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 241,
              "column": 10
            },
            "end": {
              "line": 244,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"resize\""
            }
          },
          "inheritedFrom": "NumberInputMixin"
        }
      ],
      "methods": [
        {
          "name": "_localeChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 176,
              "column": 6
            },
            "end": {
              "line": 234,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "locale"
            }
          ],
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "_computeNumberOptions",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 236,
              "column": 6
            },
            "end": {
              "line": 259,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "minimumIntegerDigits"
            },
            {
              "name": "minimumFractionDigits"
            },
            {
              "name": "maximumFractionDigits"
            },
            {
              "name": "minimumSignificantDigits"
            },
            {
              "name": "maximumSignificantDigits"
            },
            {
              "name": "useGrouping"
            },
            {
              "name": "style"
            },
            {
              "name": "currency"
            },
            {
              "name": "currencyDisplay"
            }
          ],
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "_computeFormatNumber",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 261,
              "column": 6
            },
            "end": {
              "line": 278,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "locale"
            },
            {
              "name": "numberOptions"
            },
            {
              "name": "unit"
            }
          ],
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "_computeParseNumber",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 49,
              "column": 6
            },
            "end": {
              "line": 60,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "decimalSeparator"
            },
            {
              "name": "numberStyle"
            },
            {
              "name": "useGrouping"
            }
          ],
          "inheritedFrom": "IntegerInputMixin"
        },
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 254,
              "column": 6
            },
            "end": {
              "line": 265,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_minMaxChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 165,
              "column": 6
            },
            "end": {
              "line": 174,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "min"
            },
            {
              "name": "max"
            }
          ],
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_valueChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 372,
              "column": 6
            },
            "end": {
              "line": 393,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "oldValue"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_checkValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 187,
              "column": 6
            },
            "end": {
              "line": 219,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "oldValue"
            }
          ],
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_updateValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 400,
              "column": 6
            },
            "end": {
              "line": 403,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_checkStep",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 227,
              "column": 6
            },
            "end": {
              "line": 241,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "step"
            }
          ],
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_safeMult",
          "description": "emulating handwritten multiplication to keep precision",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 246,
              "column": 6
            },
            "end": {
              "line": 248,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a"
            },
            {
              "name": "b"
            }
          ],
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_safeAdd",
          "description": "emulating handwritten addition to keep precision",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 253,
              "column": 6
            },
            "end": {
              "line": 255,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a"
            },
            {
              "name": "b"
            }
          ],
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_stepChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 31,
              "column": 6
            },
            "end": {
              "line": 39,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "step"
            },
            {
              "name": "stepMod"
            }
          ],
          "inheritedFrom": "IntegerInputMixin"
        },
        {
          "name": "_computeInvalid",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 349,
              "column": 6
            },
            "end": {
              "line": 351,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "required"
            },
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeValueIsSet",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 89,
              "column": 6
            },
            "end": {
              "line": 91,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "validate",
          "description": "validates the input for iron-form",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 96,
              "column": 6
            },
            "end": {
              "line": 98,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_attachDom",
          "description": "attach dom with `delegatesFocus: true` so that the element is also focussed while its's children are too, and to autofocus to first tabable",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 103,
              "column": 6
            },
            "end": {
              "line": 112,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom"
            }
          ],
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_createReflectPropertyToValueObserver",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 114,
              "column": 6
            },
            "end": {
              "line": 119,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "prop"
            }
          ],
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_reflectPropertyToValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 121,
              "column": 6
            },
            "end": {
              "line": 123,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "v"
            }
          ],
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_reflectValueToProperty",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 125,
              "column": 6
            },
            "end": {
              "line": 127,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "v"
            }
          ],
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 267,
              "column": 6
            },
            "end": {
              "line": 270,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_addEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 272,
              "column": 6
            },
            "end": {
              "line": 277,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_removeEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 279,
              "column": 6
            },
            "end": {
              "line": 284,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "focus",
          "description": "focus the input",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 289,
              "column": 6
            },
            "end": {
              "line": 292,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "blur",
          "description": "focus the input",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 297,
              "column": 6
            },
            "end": {
              "line": 300,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_checkKeycode",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 302,
              "column": 6
            },
            "end": {
              "line": 329,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_increm",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 331,
              "column": 6
            },
            "end": {
              "line": 347,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "step"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_inputChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 353,
              "column": 6
            },
            "end": {
              "line": 370,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "input"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_checkInput",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 395,
              "column": 6
            },
            "end": {
              "line": 398,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeType",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 62,
              "column": 6
            },
            "end": {
              "line": 68,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "decimalSeparator"
            },
            {
              "name": "numberStyle"
            },
            {
              "name": "unit"
            }
          ],
          "inheritedFrom": "IntegerInputMixin"
        },
        {
          "name": "resize",
          "description": "manually resize the minsize of the input, when the input is for example initially hidden",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 419,
              "column": 6
            },
            "end": {
              "line": 449,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_debouncedComputeWidth",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 451,
              "column": 6
            },
            "end": {
              "line": 457,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeWidth",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 459,
              "column": 6
            },
            "end": {
              "line": 461,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeMinWidth",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 463,
              "column": 6
            },
            "end": {
              "line": 473,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "noAutoWidth"
            },
            {
              "name": "formatNumber"
            },
            {
              "name": "placeholder"
            },
            {
              "name": "minlength"
            },
            {
              "name": "def"
            },
            {
              "name": "startAt"
            },
            {
              "name": "min"
            },
            {
              "name": "max"
            },
            {
              "name": "minimumIntegerDigits"
            },
            {
              "name": "minimumFractionDigits"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeMinimumIntegerDigits",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 475,
              "column": 6
            },
            "end": {
              "line": 499,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "autoPadding"
            },
            {
              "name": "padLength"
            },
            {
              "name": "def"
            },
            {
              "name": "startAt"
            },
            {
              "name": "min"
            },
            {
              "name": "max"
            },
            {
              "name": "step"
            },
            {
              "name": "numberStyle"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeMinimumFractionDigits",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 41,
              "column": 6
            },
            "end": {
              "line": 43,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "IntegerInputMixin"
        },
        {
          "name": "_computeMaximumFractionDigits",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 45,
              "column": 6
            },
            "end": {
              "line": 47,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "IntegerInputMixin"
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        },
        {
          "url": "demo/form.html",
          "description": "Form Demo"
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 142,
          "column": 4
        },
        "end": {
          "line": 147,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "IntegerInput",
      "attributes": [
        {
          "name": "locale",
          "description": "The current locale",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 21,
              "column": 10
            },
            "end": {
              "line": 25,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "decimal-separator",
          "description": "locale separator for local decimal values",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 30,
              "column": 10
            },
            "end": {
              "line": 34,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "grouping-separator",
          "description": "locale separator for grouping decimal values",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 39,
              "column": 10
            },
            "end": {
              "line": 43,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "minimum-fraction-digits",
          "description": "minimum digits right to the decimal separator",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 209,
              "column": 10
            },
            "end": {
              "line": 213,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "maximum-fraction-digits",
          "description": "maximum digits right to the decimal separator",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 218,
              "column": 10
            },
            "end": {
              "line": 222,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "minimum-integer-digits",
          "description": "minimum digits left to the decimal separator to pad",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 227,
              "column": 10
            },
            "end": {
              "line": 231,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "minimum-significant-digits",
          "description": "The minimum number of significant digits to use. Possible values are from 1 to 21; the default is 1.",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 69,
              "column": 10
            },
            "end": {
              "line": 71,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "maximum-significant-digits",
          "description": "The maximum number of significant digits to use. Possible values are from 1 to 21; the default is minimumSignificantDigits.",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 76,
              "column": 10
            },
            "end": {
              "line": 78,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "unit",
          "description": "unit of the output (only used when `number-style=\"decimal\"`)",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 83,
              "column": 10
            },
            "end": {
              "line": 85,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "unit-separator",
          "description": "the separator to separate value and unit",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 90,
              "column": 10
            },
            "end": {
              "line": 93,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "always-sign",
          "description": "always put the sign at the beginning",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 154,
              "column": 10
            },
            "end": {
              "line": 157,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "number-style",
          "description": "The formatting style to use. Is always `decimal` for `integer-input`.",
          "sourceRange": {
            "start": {
              "line": 22,
              "column": 10
            },
            "end": {
              "line": 27,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "IntegerInputMixin"
        },
        {
          "name": "use-grouping",
          "description": "if true the number will be grouped according to the locale.",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 115,
              "column": 10
            },
            "end": {
              "line": 117,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "currency",
          "description": "The currency to use in currency formatting. Possible values are the ISO 4217 currency codes, such as \"USD\" for the US dollar, \"EUR\" for the euro, or \"CNY\" for the Chinese RMB — see http://www.currency-iso.org/en/home/tables/table-a1.html. There is no default value; if the style is \"currency\", the currency property must be provided.",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 122,
              "column": 10
            },
            "end": {
              "line": 124,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "currency-display",
          "description": "How to display the currency in currency formatting. Possible values are \"symbol\" to use a localized currency symbol such as €, \"code\" to use the ISO currency code, \"name\" to use a localized currency name such as \"dollar\"; the default is \"symbol\".",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 129,
              "column": 10
            },
            "end": {
              "line": 131,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "format-number",
          "description": "number format function",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 144,
              "column": 10
            },
            "end": {
              "line": 148,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Function",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "parse-number",
          "description": "function to parse the input",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 153,
              "column": 10
            },
            "end": {
              "line": 157,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Function",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "min",
          "description": "minimal input",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 76,
              "column": 10
            },
            "end": {
              "line": 78,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "max",
          "description": "maximal input",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 83,
              "column": 10
            },
            "end": {
              "line": 85,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "step",
          "description": "step for changing the input (referencing to `min` or `0`)",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 91,
              "column": 10
            },
            "end": {
              "line": 94,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "step-mod",
          "description": "a step modifier. this is useful if you are having one step for multible elements that represent parts of numbers, like when you are having one input for the decimal part and one for the integer part.\nFor example:\n  * if `step` is `0.002` and the `step-mod` is `1000`, `2` will be used\n  * if `step` is `10` and the `step-mod` is `0.02`, `0.2` will be used",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 102,
              "column": 10
            },
            "end": {
              "line": 105,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "value",
          "description": "value of the input",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 50,
              "column": 10
            },
            "end": {
              "line": 53,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "default",
          "description": "default-value of the input",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 129,
              "column": 10
            },
            "end": {
              "line": 131,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "saturate",
          "description": "if true, the value does not revolve the range according to the maximum or the minimum",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 136,
              "column": 10
            },
            "end": {
              "line": 139,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "no-clamp",
          "description": "if true, the value does not clamp according to the given step",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 144,
              "column": 10
            },
            "end": {
              "line": 147,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "required",
          "description": "required attribute",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 16,
              "column": 10
            },
            "end": {
              "line": 20,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "invalid",
          "description": "required attribute",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 25,
              "column": 10
            },
            "end": {
              "line": 29,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "disabled",
          "description": "disables the input",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 34,
              "column": 10
            },
            "end": {
              "line": 38,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "name",
          "description": "name of the input",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 43,
              "column": 10
            },
            "end": {
              "line": 45,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "property-for-value",
          "description": "defines the property that should be used for the value",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 66,
              "column": 10
            },
            "end": {
              "line": 69,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "pad-length",
          "description": "length to pad the string (with `0`) according to the total amount of numbers",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 125,
              "column": 10
            },
            "end": {
              "line": 127,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "placeholder",
          "description": "placeholder string",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 133,
              "column": 10
            },
            "end": {
              "line": 135,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "no-auto-width",
          "description": "if set `true`, the attributes `min`, `max`, `start-at` and `default` won't be used to compute a mininmal width. `minlenght` and `placeholder` will still be used.",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 140,
              "column": 10
            },
            "end": {
              "line": 142,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "auto-resize",
          "description": "if set `true`, the input will be resized when you type in, but always when you confirm the input (by moving out or pressing enter)",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 147,
              "column": 10
            },
            "end": {
              "line": 149,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "auto-padding",
          "description": "enables auto padding",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 163,
              "column": 10
            },
            "end": {
              "line": 165,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "input",
          "description": "string value of the input",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 170,
              "column": 10
            },
            "end": {
              "line": 174,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "start-at",
          "description": "start where to increment the value",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 194,
              "column": 10
            },
            "end": {
              "line": 196,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "minlength",
          "description": "minimum character width of the input",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 201,
              "column": 10
            },
            "end": {
              "line": 204,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "hidden",
          "description": "",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 241,
              "column": 10
            },
            "end": {
              "line": 244,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "NumberInputMixin"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "integer-input",
      "mixins": [
        "IntegerInputMixin"
      ]
    }
  ],
  "mixins": [
    {
      "description": "mixin to create a number-input",
      "summary": "",
      "path": "number-input.html",
      "properties": [
        {
          "name": "locale",
          "type": "string",
          "description": "The current locale",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 21,
              "column": 10
            },
            "end": {
              "line": 25,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "decimalSeparator",
          "type": "string",
          "description": "locale separator for local decimal values",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 30,
              "column": 10
            },
            "end": {
              "line": 34,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "groupingSeparator",
          "type": "string",
          "description": "locale separator for grouping decimal values",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 39,
              "column": 10
            },
            "end": {
              "line": 43,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "minimumFractionDigits",
          "type": "number",
          "description": "minimum digits right to the decimal separator",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 209,
              "column": 10
            },
            "end": {
              "line": 213,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          }
        },
        {
          "name": "maximumFractionDigits",
          "type": "number",
          "description": "maximum digits right to the decimal separator",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 218,
              "column": 10
            },
            "end": {
              "line": 222,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          }
        },
        {
          "name": "minimumIntegerDigits",
          "type": "number",
          "description": "minimum digits left to the decimal separator to pad",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 227,
              "column": 10
            },
            "end": {
              "line": 231,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          }
        },
        {
          "name": "minimumSignificantDigits",
          "type": "number",
          "description": "The minimum number of significant digits to use. Possible values are from 1 to 21; the default is 1.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 69,
              "column": 10
            },
            "end": {
              "line": 71,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "maximumSignificantDigits",
          "type": "number",
          "description": "The maximum number of significant digits to use. Possible values are from 1 to 21; the default is minimumSignificantDigits.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 76,
              "column": 10
            },
            "end": {
              "line": 78,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "unit",
          "type": "string",
          "description": "unit of the output (only used when `number-style=\"decimal\"`)",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 83,
              "column": 10
            },
            "end": {
              "line": 85,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "unitSeparator",
          "type": "string",
          "description": "the separator to separate value and unit",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 90,
              "column": 10
            },
            "end": {
              "line": 93,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\" \"",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "alwaysSign",
          "type": "boolean",
          "description": "always put the sign at the beginning",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 154,
              "column": 10
            },
            "end": {
              "line": 157,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateValue\""
            }
          }
        },
        {
          "name": "numberStyle",
          "type": "string",
          "description": "The formatting style to use. Possible values are \"decimal\" for plain number formatting, \"currency\" for currency formatting, and \"percent\" for percent formatting; the default is \"decimal\".\nnotice: min, max and step are not in percent (so e.g. if step is 0.01, it means that the step is 1%)",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 106,
              "column": 10
            },
            "end": {
              "line": 110,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "\"decimal\"",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "useGrouping",
          "type": "boolean",
          "description": "if true the number will be grouped according to the locale.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 115,
              "column": 10
            },
            "end": {
              "line": 117,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "currency",
          "type": "string",
          "description": "The currency to use in currency formatting. Possible values are the ISO 4217 currency codes, such as \"USD\" for the US dollar, \"EUR\" for the euro, or \"CNY\" for the Chinese RMB — see http://www.currency-iso.org/en/home/tables/table-a1.html. There is no default value; if the style is \"currency\", the currency property must be provided.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 122,
              "column": 10
            },
            "end": {
              "line": 124,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "currencyDisplay",
          "type": "string",
          "description": "How to display the currency in currency formatting. Possible values are \"symbol\" to use a localized currency symbol such as €, \"code\" to use the ISO currency code, \"name\" to use a localized currency name such as \"dollar\"; the default is \"symbol\".",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 129,
              "column": 10
            },
            "end": {
              "line": 131,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "_numberOptions",
          "type": "number",
          "description": "number format options",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 136,
              "column": 10
            },
            "end": {
              "line": 139,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "formatNumber",
          "type": "Function",
          "description": "number format function",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 144,
              "column": 10
            },
            "end": {
              "line": 148,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "parseNumber",
          "type": "Function",
          "description": "function to parse the input",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 153,
              "column": 10
            },
            "end": {
              "line": 157,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "_regExpNotInNumber",
          "type": "RegExp",
          "description": "Regular Expression for non numeric signs",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 162,
              "column": 10
            },
            "end": {
              "line": 166,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "defaultValue": "{}",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "min",
          "type": "number",
          "description": "minimal input",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 76,
              "column": 10
            },
            "end": {
              "line": 78,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "max",
          "type": "number",
          "description": "maximal input",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 83,
              "column": 10
            },
            "end": {
              "line": 85,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "step",
          "type": "number",
          "description": "step for changing the input (referencing to `min` or `0`)",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 91,
              "column": 10
            },
            "end": {
              "line": 94,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "1",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "stepMod",
          "type": "number",
          "description": "a step modifier. this is useful if you are having one step for multible elements that represent parts of numbers, like when you are having one input for the decimal part and one for the integer part.\nFor example:\n  * if `step` is `0.002` and the `step-mod` is `1000`, `2` will be used\n  * if `step` is `10` and the `step-mod` is `0.02`, `0.2` will be used",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 102,
              "column": 10
            },
            "end": {
              "line": 105,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "1",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_step",
          "type": "number",
          "description": "the used step, product of stepMod and step",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 111,
              "column": 10
            },
            "end": {
              "line": 114,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "1",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "value",
          "type": "Object",
          "description": "value of the input",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 50,
              "column": 10
            },
            "end": {
              "line": 53,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "default",
          "type": "number",
          "description": "default-value of the input",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 129,
              "column": 10
            },
            "end": {
              "line": 131,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "saturate",
          "type": "boolean",
          "description": "if true, the value does not revolve the range according to the maximum or the minimum",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 136,
              "column": 10
            },
            "end": {
              "line": 139,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateValue\""
            }
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "noClamp",
          "type": "boolean",
          "description": "if true, the value does not clamp according to the given step",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 144,
              "column": 10
            },
            "end": {
              "line": 147,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateValue\""
            }
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "required",
          "type": "boolean",
          "description": "required attribute",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 16,
              "column": 10
            },
            "end": {
              "line": 20,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "invalid",
          "type": "boolean",
          "description": "required attribute",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 25,
              "column": 10
            },
            "end": {
              "line": 29,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "disabled",
          "type": "boolean",
          "description": "disables the input",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 34,
              "column": 10
            },
            "end": {
              "line": 38,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "name",
          "type": "string",
          "description": "name of the input",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 43,
              "column": 10
            },
            "end": {
              "line": 45,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_valueIsSet",
          "type": "boolean",
          "description": "is true when the value is not undefined",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 58,
              "column": 10
            },
            "end": {
              "line": 61,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "propertyForValue",
          "type": "string",
          "description": "defines the property that should be used for the value",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 66,
              "column": 10
            },
            "end": {
              "line": 69,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_createReflectPropertyToValueObserver\""
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "padLength",
          "type": "number",
          "description": "length to pad the string (with `0`) according to the total amount of numbers",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 125,
              "column": 10
            },
            "end": {
              "line": 127,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "placeholder",
          "type": "string",
          "description": "placeholder string",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 133,
              "column": 10
            },
            "end": {
              "line": 135,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "noAutoWidth",
          "type": "boolean",
          "description": "if set `true`, the attributes `min`, `max`, `start-at` and `default` won't be used to compute a mininmal width. `minlenght` and `placeholder` will still be used.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 140,
              "column": 10
            },
            "end": {
              "line": 142,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "autoResize",
          "type": "boolean",
          "description": "if set `true`, the input will be resized when you type in, but always when you confirm the input (by moving out or pressing enter)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 147,
              "column": 10
            },
            "end": {
              "line": 149,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "autoPadding",
          "type": "boolean",
          "description": "enables auto padding",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 163,
              "column": 10
            },
            "end": {
              "line": 165,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "input",
          "type": "string",
          "description": "string value of the input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 170,
              "column": 10
            },
            "end": {
              "line": 174,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_inputChanged\""
            }
          }
        },
        {
          "name": "_input",
          "type": "string",
          "description": "live value of the input",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 179,
              "column": 10
            },
            "end": {
              "line": 181,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_minWidthString",
          "type": "string",
          "description": "string that is used to compute the minimal width of the input",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 186,
              "column": 10
            },
            "end": {
              "line": 189,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"resize\""
            }
          }
        },
        {
          "name": "startAt",
          "type": "number",
          "description": "start where to increment the value",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 194,
              "column": 10
            },
            "end": {
              "line": 196,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "minlength",
          "type": "number",
          "description": "minimum character width of the input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 201,
              "column": 10
            },
            "end": {
              "line": 204,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "1"
        },
        {
          "name": "_type",
          "type": "string",
          "description": "type of the input",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 236,
              "column": 10
            },
            "end": {
              "line": 239,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "hidden",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 241,
              "column": 10
            },
            "end": {
              "line": 244,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"resize\""
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_localeChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 176,
              "column": 6
            },
            "end": {
              "line": 234,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "locale"
            }
          ],
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "_computeNumberOptions",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 236,
              "column": 6
            },
            "end": {
              "line": 259,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "minimumIntegerDigits"
            },
            {
              "name": "minimumFractionDigits"
            },
            {
              "name": "maximumFractionDigits"
            },
            {
              "name": "minimumSignificantDigits"
            },
            {
              "name": "maximumSignificantDigits"
            },
            {
              "name": "useGrouping"
            },
            {
              "name": "style"
            },
            {
              "name": "currency"
            },
            {
              "name": "currencyDisplay"
            }
          ],
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "_computeFormatNumber",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 261,
              "column": 6
            },
            "end": {
              "line": 278,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "locale"
            },
            {
              "name": "numberOptions"
            },
            {
              "name": "unit"
            }
          ],
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "_computeParseNumber",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 280,
              "column": 6
            },
            "end": {
              "line": 302,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "decimalSeparator"
            },
            {
              "name": "numberStyle"
            },
            {
              "name": "useGrouping"
            }
          ],
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 254,
              "column": 6
            },
            "end": {
              "line": 265,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_minMaxChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 165,
              "column": 6
            },
            "end": {
              "line": 174,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "min"
            },
            {
              "name": "max"
            }
          ],
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_valueChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 372,
              "column": 6
            },
            "end": {
              "line": 393,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "oldValue"
            }
          ]
        },
        {
          "name": "_checkValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 187,
              "column": 6
            },
            "end": {
              "line": 219,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "oldValue"
            }
          ],
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_updateValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 400,
              "column": 6
            },
            "end": {
              "line": 403,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_checkStep",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 227,
              "column": 6
            },
            "end": {
              "line": 241,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "step"
            }
          ],
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_safeMult",
          "description": "emulating handwritten multiplication to keep precision",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 246,
              "column": 6
            },
            "end": {
              "line": 248,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a"
            },
            {
              "name": "b"
            }
          ],
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_safeAdd",
          "description": "emulating handwritten addition to keep precision",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 253,
              "column": 6
            },
            "end": {
              "line": 255,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a"
            },
            {
              "name": "b"
            }
          ],
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_stepChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 257,
              "column": 6
            },
            "end": {
              "line": 265,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "step"
            },
            {
              "name": "stepMod"
            }
          ],
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_computeInvalid",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 349,
              "column": 6
            },
            "end": {
              "line": 351,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "required"
            },
            {
              "name": "value"
            }
          ]
        },
        {
          "name": "_computeValueIsSet",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 89,
              "column": 6
            },
            "end": {
              "line": 91,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "validate",
          "description": "validates the input for iron-form",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 96,
              "column": 6
            },
            "end": {
              "line": 98,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_attachDom",
          "description": "attach dom with `delegatesFocus: true` so that the element is also focussed while its's children are too, and to autofocus to first tabable",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 103,
              "column": 6
            },
            "end": {
              "line": 112,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom"
            }
          ],
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_createReflectPropertyToValueObserver",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 114,
              "column": 6
            },
            "end": {
              "line": 119,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "prop"
            }
          ],
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_reflectPropertyToValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 121,
              "column": 6
            },
            "end": {
              "line": 123,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "v"
            }
          ],
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_reflectValueToProperty",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 125,
              "column": 6
            },
            "end": {
              "line": 127,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "v"
            }
          ],
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 267,
              "column": 6
            },
            "end": {
              "line": 270,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_addEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 272,
              "column": 6
            },
            "end": {
              "line": 277,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_removeEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 279,
              "column": 6
            },
            "end": {
              "line": 284,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "focus",
          "description": "focus the input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 289,
              "column": 6
            },
            "end": {
              "line": 292,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "blur",
          "description": "focus the input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 297,
              "column": 6
            },
            "end": {
              "line": 300,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_checkKeycode",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 302,
              "column": 6
            },
            "end": {
              "line": 329,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_increm",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 331,
              "column": 6
            },
            "end": {
              "line": 347,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "step"
            }
          ]
        },
        {
          "name": "_inputChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 353,
              "column": 6
            },
            "end": {
              "line": 370,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "input"
            }
          ]
        },
        {
          "name": "_checkInput",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 395,
              "column": 6
            },
            "end": {
              "line": 398,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_computeType",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 405,
              "column": 6
            },
            "end": {
              "line": 414,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "decimalSeparator"
            },
            {
              "name": "numberStyle"
            },
            {
              "name": "unit"
            }
          ]
        },
        {
          "name": "resize",
          "description": "manually resize the minsize of the input, when the input is for example initially hidden",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 419,
              "column": 6
            },
            "end": {
              "line": 449,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_debouncedComputeWidth",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 451,
              "column": 6
            },
            "end": {
              "line": 457,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_computeWidth",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 459,
              "column": 6
            },
            "end": {
              "line": 461,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_computeMinWidth",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 463,
              "column": 6
            },
            "end": {
              "line": 473,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "noAutoWidth"
            },
            {
              "name": "formatNumber"
            },
            {
              "name": "placeholder"
            },
            {
              "name": "minlength"
            },
            {
              "name": "def"
            },
            {
              "name": "startAt"
            },
            {
              "name": "min"
            },
            {
              "name": "max"
            },
            {
              "name": "minimumIntegerDigits"
            },
            {
              "name": "minimumFractionDigits"
            }
          ]
        },
        {
          "name": "_computeMinimumIntegerDigits",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 475,
              "column": 6
            },
            "end": {
              "line": 499,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "autoPadding"
            },
            {
              "name": "padLength"
            },
            {
              "name": "def"
            },
            {
              "name": "startAt"
            },
            {
              "name": "min"
            },
            {
              "name": "max"
            },
            {
              "name": "step"
            },
            {
              "name": "numberStyle"
            }
          ]
        },
        {
          "name": "_computeMinimumFractionDigits",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 501,
              "column": 6
            },
            "end": {
              "line": 516,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "step"
            },
            {
              "name": "min"
            },
            {
              "name": "max"
            },
            {
              "name": "numberStyle"
            }
          ]
        },
        {
          "name": "_computeMaximumFractionDigits",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 518,
              "column": 6
            },
            "end": {
              "line": 523,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "minimumFractionDigits"
            },
            {
              "name": "noClamp"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 18,
          "column": 2
        },
        "end": {
          "line": 525,
          "column": 3
        }
      },
      "privacy": "public",
      "name": "NumberInputMixin",
      "attributes": [
        {
          "name": "locale",
          "description": "The current locale",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 21,
              "column": 10
            },
            "end": {
              "line": 25,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "decimal-separator",
          "description": "locale separator for local decimal values",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 30,
              "column": 10
            },
            "end": {
              "line": 34,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "grouping-separator",
          "description": "locale separator for grouping decimal values",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 39,
              "column": 10
            },
            "end": {
              "line": 43,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "minimum-fraction-digits",
          "description": "minimum digits right to the decimal separator",
          "sourceRange": {
            "start": {
              "line": 209,
              "column": 10
            },
            "end": {
              "line": 213,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "maximum-fraction-digits",
          "description": "maximum digits right to the decimal separator",
          "sourceRange": {
            "start": {
              "line": 218,
              "column": 10
            },
            "end": {
              "line": 222,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "minimum-integer-digits",
          "description": "minimum digits left to the decimal separator to pad",
          "sourceRange": {
            "start": {
              "line": 227,
              "column": 10
            },
            "end": {
              "line": 231,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "minimum-significant-digits",
          "description": "The minimum number of significant digits to use. Possible values are from 1 to 21; the default is 1.",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 69,
              "column": 10
            },
            "end": {
              "line": 71,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "maximum-significant-digits",
          "description": "The maximum number of significant digits to use. Possible values are from 1 to 21; the default is minimumSignificantDigits.",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 76,
              "column": 10
            },
            "end": {
              "line": 78,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "unit",
          "description": "unit of the output (only used when `number-style=\"decimal\"`)",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 83,
              "column": 10
            },
            "end": {
              "line": 85,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "unit-separator",
          "description": "the separator to separate value and unit",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 90,
              "column": 10
            },
            "end": {
              "line": 93,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "always-sign",
          "description": "always put the sign at the beginning",
          "sourceRange": {
            "start": {
              "line": 154,
              "column": 10
            },
            "end": {
              "line": 157,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "number-style",
          "description": "The formatting style to use. Possible values are \"decimal\" for plain number formatting, \"currency\" for currency formatting, and \"percent\" for percent formatting; the default is \"decimal\".\nnotice: min, max and step are not in percent (so e.g. if step is 0.01, it means that the step is 1%)",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 106,
              "column": 10
            },
            "end": {
              "line": 110,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "use-grouping",
          "description": "if true the number will be grouped according to the locale.",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 115,
              "column": 10
            },
            "end": {
              "line": 117,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "currency",
          "description": "The currency to use in currency formatting. Possible values are the ISO 4217 currency codes, such as \"USD\" for the US dollar, \"EUR\" for the euro, or \"CNY\" for the Chinese RMB — see http://www.currency-iso.org/en/home/tables/table-a1.html. There is no default value; if the style is \"currency\", the currency property must be provided.",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 122,
              "column": 10
            },
            "end": {
              "line": 124,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "currency-display",
          "description": "How to display the currency in currency formatting. Possible values are \"symbol\" to use a localized currency symbol such as €, \"code\" to use the ISO currency code, \"name\" to use a localized currency name such as \"dollar\"; the default is \"symbol\".",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 129,
              "column": 10
            },
            "end": {
              "line": 131,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "format-number",
          "description": "number format function",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 144,
              "column": 10
            },
            "end": {
              "line": 148,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Function",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "parse-number",
          "description": "function to parse the input",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 153,
              "column": 10
            },
            "end": {
              "line": 157,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Function",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "min",
          "description": "minimal input",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 76,
              "column": 10
            },
            "end": {
              "line": 78,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "max",
          "description": "maximal input",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 83,
              "column": 10
            },
            "end": {
              "line": 85,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "step",
          "description": "step for changing the input (referencing to `min` or `0`)",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 91,
              "column": 10
            },
            "end": {
              "line": 94,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "step-mod",
          "description": "a step modifier. this is useful if you are having one step for multible elements that represent parts of numbers, like when you are having one input for the decimal part and one for the integer part.\nFor example:\n  * if `step` is `0.002` and the `step-mod` is `1000`, `2` will be used\n  * if `step` is `10` and the `step-mod` is `0.02`, `0.2` will be used",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 102,
              "column": 10
            },
            "end": {
              "line": 105,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "value",
          "description": "value of the input",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 50,
              "column": 10
            },
            "end": {
              "line": 53,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "default",
          "description": "default-value of the input",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 129,
              "column": 10
            },
            "end": {
              "line": 131,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "saturate",
          "description": "if true, the value does not revolve the range according to the maximum or the minimum",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 136,
              "column": 10
            },
            "end": {
              "line": 139,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "no-clamp",
          "description": "if true, the value does not clamp according to the given step",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 144,
              "column": 10
            },
            "end": {
              "line": 147,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "required",
          "description": "required attribute",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 16,
              "column": 10
            },
            "end": {
              "line": 20,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "invalid",
          "description": "required attribute",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 25,
              "column": 10
            },
            "end": {
              "line": 29,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "disabled",
          "description": "disables the input",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 34,
              "column": 10
            },
            "end": {
              "line": 38,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "name",
          "description": "name of the input",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 43,
              "column": 10
            },
            "end": {
              "line": 45,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "property-for-value",
          "description": "defines the property that should be used for the value",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 66,
              "column": 10
            },
            "end": {
              "line": 69,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "pad-length",
          "description": "length to pad the string (with `0`) according to the total amount of numbers",
          "sourceRange": {
            "start": {
              "line": 125,
              "column": 10
            },
            "end": {
              "line": 127,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "placeholder",
          "description": "placeholder string",
          "sourceRange": {
            "start": {
              "line": 133,
              "column": 10
            },
            "end": {
              "line": 135,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "no-auto-width",
          "description": "if set `true`, the attributes `min`, `max`, `start-at` and `default` won't be used to compute a mininmal width. `minlenght` and `placeholder` will still be used.",
          "sourceRange": {
            "start": {
              "line": 140,
              "column": 10
            },
            "end": {
              "line": 142,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "auto-resize",
          "description": "if set `true`, the input will be resized when you type in, but always when you confirm the input (by moving out or pressing enter)",
          "sourceRange": {
            "start": {
              "line": 147,
              "column": 10
            },
            "end": {
              "line": 149,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "auto-padding",
          "description": "enables auto padding",
          "sourceRange": {
            "start": {
              "line": 163,
              "column": 10
            },
            "end": {
              "line": 165,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "input",
          "description": "string value of the input",
          "sourceRange": {
            "start": {
              "line": 170,
              "column": 10
            },
            "end": {
              "line": 174,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "start-at",
          "description": "start where to increment the value",
          "sourceRange": {
            "start": {
              "line": 194,
              "column": 10
            },
            "end": {
              "line": 196,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "minlength",
          "description": "minimum character width of the input",
          "sourceRange": {
            "start": {
              "line": 201,
              "column": 10
            },
            "end": {
              "line": 204,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "hidden",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 241,
              "column": 10
            },
            "end": {
              "line": 244,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "mixins": [
        "IntlNumberFormatMixin",
        "RangeMixin",
        "FormElementMixin"
      ]
    },
    {
      "description": "mixin to create a integer-input",
      "summary": "",
      "path": "integer-input.html",
      "properties": [
        {
          "name": "locale",
          "type": "string",
          "description": "The current locale",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 21,
              "column": 10
            },
            "end": {
              "line": 25,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "decimalSeparator",
          "type": "string",
          "description": "locale separator for local decimal values",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 30,
              "column": 10
            },
            "end": {
              "line": 34,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "groupingSeparator",
          "type": "string",
          "description": "locale separator for grouping decimal values",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 39,
              "column": 10
            },
            "end": {
              "line": 43,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "minimumFractionDigits",
          "type": "number",
          "description": "minimum digits right to the decimal separator",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 209,
              "column": 10
            },
            "end": {
              "line": 213,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "maximumFractionDigits",
          "type": "number",
          "description": "maximum digits right to the decimal separator",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 218,
              "column": 10
            },
            "end": {
              "line": 222,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "minimumIntegerDigits",
          "type": "number",
          "description": "minimum digits left to the decimal separator to pad",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 227,
              "column": 10
            },
            "end": {
              "line": 231,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "minimumSignificantDigits",
          "type": "number",
          "description": "The minimum number of significant digits to use. Possible values are from 1 to 21; the default is 1.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 69,
              "column": 10
            },
            "end": {
              "line": 71,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "maximumSignificantDigits",
          "type": "number",
          "description": "The maximum number of significant digits to use. Possible values are from 1 to 21; the default is minimumSignificantDigits.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 76,
              "column": 10
            },
            "end": {
              "line": 78,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "unit",
          "type": "string",
          "description": "unit of the output (only used when `number-style=\"decimal\"`)",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 83,
              "column": 10
            },
            "end": {
              "line": 85,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "unitSeparator",
          "type": "string",
          "description": "the separator to separate value and unit",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 90,
              "column": 10
            },
            "end": {
              "line": 93,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\" \"",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "alwaysSign",
          "type": "boolean",
          "description": "always put the sign at the beginning",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 154,
              "column": 10
            },
            "end": {
              "line": 157,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateValue\""
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "numberStyle",
          "type": "string",
          "description": "The formatting style to use. Is always `decimal` for `integer-input`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 22,
              "column": 10
            },
            "end": {
              "line": 27,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          },
          "defaultValue": "\"decimal\""
        },
        {
          "name": "useGrouping",
          "type": "boolean",
          "description": "if true the number will be grouped according to the locale.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 115,
              "column": 10
            },
            "end": {
              "line": 117,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "currency",
          "type": "string",
          "description": "The currency to use in currency formatting. Possible values are the ISO 4217 currency codes, such as \"USD\" for the US dollar, \"EUR\" for the euro, or \"CNY\" for the Chinese RMB — see http://www.currency-iso.org/en/home/tables/table-a1.html. There is no default value; if the style is \"currency\", the currency property must be provided.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 122,
              "column": 10
            },
            "end": {
              "line": 124,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "currencyDisplay",
          "type": "string",
          "description": "How to display the currency in currency formatting. Possible values are \"symbol\" to use a localized currency symbol such as €, \"code\" to use the ISO currency code, \"name\" to use a localized currency name such as \"dollar\"; the default is \"symbol\".",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 129,
              "column": 10
            },
            "end": {
              "line": 131,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "_numberOptions",
          "type": "number",
          "description": "number format options",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 136,
              "column": 10
            },
            "end": {
              "line": 139,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "formatNumber",
          "type": "Function",
          "description": "number format function",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 144,
              "column": 10
            },
            "end": {
              "line": 148,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "parseNumber",
          "type": "Function",
          "description": "function to parse the input",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 153,
              "column": 10
            },
            "end": {
              "line": 157,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "_regExpNotInNumber",
          "type": "RegExp",
          "description": "Regular Expression for non numeric signs",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 162,
              "column": 10
            },
            "end": {
              "line": 166,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "defaultValue": "{}",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "min",
          "type": "number",
          "description": "minimal input",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 76,
              "column": 10
            },
            "end": {
              "line": 78,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "max",
          "type": "number",
          "description": "maximal input",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 83,
              "column": 10
            },
            "end": {
              "line": 85,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "step",
          "type": "number",
          "description": "step for changing the input (referencing to `min` or `0`)",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 91,
              "column": 10
            },
            "end": {
              "line": 94,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "1",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "stepMod",
          "type": "number",
          "description": "a step modifier. this is useful if you are having one step for multible elements that represent parts of numbers, like when you are having one input for the decimal part and one for the integer part.\nFor example:\n  * if `step` is `0.002` and the `step-mod` is `1000`, `2` will be used\n  * if `step` is `10` and the `step-mod` is `0.02`, `0.2` will be used",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 102,
              "column": 10
            },
            "end": {
              "line": 105,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "1",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_step",
          "type": "number",
          "description": "the used step, product of stepMod and step",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 111,
              "column": 10
            },
            "end": {
              "line": 114,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "1",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "value",
          "type": "Object",
          "description": "value of the input",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 50,
              "column": 10
            },
            "end": {
              "line": 53,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "default",
          "type": "number",
          "description": "default-value of the input",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 129,
              "column": 10
            },
            "end": {
              "line": 131,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "saturate",
          "type": "boolean",
          "description": "if true, the value does not revolve the range according to the maximum or the minimum",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 136,
              "column": 10
            },
            "end": {
              "line": 139,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateValue\""
            }
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "noClamp",
          "type": "boolean",
          "description": "if true, the value does not clamp according to the given step",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 144,
              "column": 10
            },
            "end": {
              "line": 147,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateValue\""
            }
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "required",
          "type": "boolean",
          "description": "required attribute",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 16,
              "column": 10
            },
            "end": {
              "line": 20,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "invalid",
          "type": "boolean",
          "description": "required attribute",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 25,
              "column": 10
            },
            "end": {
              "line": 29,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "disabled",
          "type": "boolean",
          "description": "disables the input",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 34,
              "column": 10
            },
            "end": {
              "line": 38,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "name",
          "type": "string",
          "description": "name of the input",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 43,
              "column": 10
            },
            "end": {
              "line": 45,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_valueIsSet",
          "type": "boolean",
          "description": "is true when the value is not undefined",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 58,
              "column": 10
            },
            "end": {
              "line": 61,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "propertyForValue",
          "type": "string",
          "description": "defines the property that should be used for the value",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 66,
              "column": 10
            },
            "end": {
              "line": 69,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_createReflectPropertyToValueObserver\""
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "padLength",
          "type": "number",
          "description": "length to pad the string (with `0`) according to the total amount of numbers",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 125,
              "column": 10
            },
            "end": {
              "line": 127,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "placeholder",
          "type": "string",
          "description": "placeholder string",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 133,
              "column": 10
            },
            "end": {
              "line": 135,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "noAutoWidth",
          "type": "boolean",
          "description": "if set `true`, the attributes `min`, `max`, `start-at` and `default` won't be used to compute a mininmal width. `minlenght` and `placeholder` will still be used.",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 140,
              "column": 10
            },
            "end": {
              "line": 142,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "autoResize",
          "type": "boolean",
          "description": "if set `true`, the input will be resized when you type in, but always when you confirm the input (by moving out or pressing enter)",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 147,
              "column": 10
            },
            "end": {
              "line": 149,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "autoPadding",
          "type": "boolean",
          "description": "enables auto padding",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 163,
              "column": 10
            },
            "end": {
              "line": 165,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "input",
          "type": "string",
          "description": "string value of the input",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 170,
              "column": 10
            },
            "end": {
              "line": 174,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_inputChanged\""
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_input",
          "type": "string",
          "description": "live value of the input",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 179,
              "column": 10
            },
            "end": {
              "line": 181,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_minWidthString",
          "type": "string",
          "description": "string that is used to compute the minimal width of the input",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 186,
              "column": 10
            },
            "end": {
              "line": 189,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"resize\""
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "startAt",
          "type": "number",
          "description": "start where to increment the value",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 194,
              "column": 10
            },
            "end": {
              "line": 196,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "minlength",
          "type": "number",
          "description": "minimum character width of the input",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 201,
              "column": 10
            },
            "end": {
              "line": 204,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "1",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_type",
          "type": "string",
          "description": "type of the input",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 236,
              "column": 10
            },
            "end": {
              "line": 239,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "hidden",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 241,
              "column": 10
            },
            "end": {
              "line": 244,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"resize\""
            }
          },
          "inheritedFrom": "NumberInputMixin"
        }
      ],
      "methods": [
        {
          "name": "_localeChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 176,
              "column": 6
            },
            "end": {
              "line": 234,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "locale"
            }
          ],
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "_computeNumberOptions",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 236,
              "column": 6
            },
            "end": {
              "line": 259,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "minimumIntegerDigits"
            },
            {
              "name": "minimumFractionDigits"
            },
            {
              "name": "maximumFractionDigits"
            },
            {
              "name": "minimumSignificantDigits"
            },
            {
              "name": "maximumSignificantDigits"
            },
            {
              "name": "useGrouping"
            },
            {
              "name": "style"
            },
            {
              "name": "currency"
            },
            {
              "name": "currencyDisplay"
            }
          ],
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "_computeFormatNumber",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 261,
              "column": 6
            },
            "end": {
              "line": 278,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "locale"
            },
            {
              "name": "numberOptions"
            },
            {
              "name": "unit"
            }
          ],
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "_computeParseNumber",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 49,
              "column": 6
            },
            "end": {
              "line": 60,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "decimalSeparator"
            },
            {
              "name": "numberStyle"
            },
            {
              "name": "useGrouping"
            }
          ]
        },
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 254,
              "column": 6
            },
            "end": {
              "line": 265,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_minMaxChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 165,
              "column": 6
            },
            "end": {
              "line": 174,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "min"
            },
            {
              "name": "max"
            }
          ],
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_valueChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 372,
              "column": 6
            },
            "end": {
              "line": 393,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "oldValue"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_checkValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 187,
              "column": 6
            },
            "end": {
              "line": 219,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "oldValue"
            }
          ],
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_updateValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 400,
              "column": 6
            },
            "end": {
              "line": 403,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_checkStep",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 227,
              "column": 6
            },
            "end": {
              "line": 241,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "step"
            }
          ],
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_safeMult",
          "description": "emulating handwritten multiplication to keep precision",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 246,
              "column": 6
            },
            "end": {
              "line": 248,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a"
            },
            {
              "name": "b"
            }
          ],
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_safeAdd",
          "description": "emulating handwritten addition to keep precision",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 253,
              "column": 6
            },
            "end": {
              "line": 255,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a"
            },
            {
              "name": "b"
            }
          ],
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_stepChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 31,
              "column": 6
            },
            "end": {
              "line": 39,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "step"
            },
            {
              "name": "stepMod"
            }
          ]
        },
        {
          "name": "_computeInvalid",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 349,
              "column": 6
            },
            "end": {
              "line": 351,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "required"
            },
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeValueIsSet",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 89,
              "column": 6
            },
            "end": {
              "line": 91,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "validate",
          "description": "validates the input for iron-form",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 96,
              "column": 6
            },
            "end": {
              "line": 98,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_attachDom",
          "description": "attach dom with `delegatesFocus: true` so that the element is also focussed while its's children are too, and to autofocus to first tabable",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 103,
              "column": 6
            },
            "end": {
              "line": 112,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom"
            }
          ],
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_createReflectPropertyToValueObserver",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 114,
              "column": 6
            },
            "end": {
              "line": 119,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "prop"
            }
          ],
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_reflectPropertyToValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 121,
              "column": 6
            },
            "end": {
              "line": 123,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "v"
            }
          ],
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_reflectValueToProperty",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 125,
              "column": 6
            },
            "end": {
              "line": 127,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "v"
            }
          ],
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 267,
              "column": 6
            },
            "end": {
              "line": 270,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_addEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 272,
              "column": 6
            },
            "end": {
              "line": 277,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_removeEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 279,
              "column": 6
            },
            "end": {
              "line": 284,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "focus",
          "description": "focus the input",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 289,
              "column": 6
            },
            "end": {
              "line": 292,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "blur",
          "description": "focus the input",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 297,
              "column": 6
            },
            "end": {
              "line": 300,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_checkKeycode",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 302,
              "column": 6
            },
            "end": {
              "line": 329,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_increm",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 331,
              "column": 6
            },
            "end": {
              "line": 347,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "step"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_inputChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 353,
              "column": 6
            },
            "end": {
              "line": 370,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "input"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_checkInput",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 395,
              "column": 6
            },
            "end": {
              "line": 398,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeType",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 62,
              "column": 6
            },
            "end": {
              "line": 68,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "decimalSeparator"
            },
            {
              "name": "numberStyle"
            },
            {
              "name": "unit"
            }
          ]
        },
        {
          "name": "resize",
          "description": "manually resize the minsize of the input, when the input is for example initially hidden",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 419,
              "column": 6
            },
            "end": {
              "line": 449,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_debouncedComputeWidth",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 451,
              "column": 6
            },
            "end": {
              "line": 457,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeWidth",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 459,
              "column": 6
            },
            "end": {
              "line": 461,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeMinWidth",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 463,
              "column": 6
            },
            "end": {
              "line": 473,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "noAutoWidth"
            },
            {
              "name": "formatNumber"
            },
            {
              "name": "placeholder"
            },
            {
              "name": "minlength"
            },
            {
              "name": "def"
            },
            {
              "name": "startAt"
            },
            {
              "name": "min"
            },
            {
              "name": "max"
            },
            {
              "name": "minimumIntegerDigits"
            },
            {
              "name": "minimumFractionDigits"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeMinimumIntegerDigits",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 475,
              "column": 6
            },
            "end": {
              "line": 499,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "autoPadding"
            },
            {
              "name": "padLength"
            },
            {
              "name": "def"
            },
            {
              "name": "startAt"
            },
            {
              "name": "min"
            },
            {
              "name": "max"
            },
            {
              "name": "step"
            },
            {
              "name": "numberStyle"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeMinimumFractionDigits",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 41,
              "column": 6
            },
            "end": {
              "line": 43,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_computeMaximumFractionDigits",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 45,
              "column": 6
            },
            "end": {
              "line": 47,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 12,
          "column": 2
        },
        "end": {
          "line": 70,
          "column": 3
        }
      },
      "privacy": "public",
      "name": "IntegerInputMixin",
      "attributes": [
        {
          "name": "locale",
          "description": "The current locale",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 21,
              "column": 10
            },
            "end": {
              "line": 25,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "decimal-separator",
          "description": "locale separator for local decimal values",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 30,
              "column": 10
            },
            "end": {
              "line": 34,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "grouping-separator",
          "description": "locale separator for grouping decimal values",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 39,
              "column": 10
            },
            "end": {
              "line": 43,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "minimum-fraction-digits",
          "description": "minimum digits right to the decimal separator",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 209,
              "column": 10
            },
            "end": {
              "line": 213,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "maximum-fraction-digits",
          "description": "maximum digits right to the decimal separator",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 218,
              "column": 10
            },
            "end": {
              "line": 222,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "minimum-integer-digits",
          "description": "minimum digits left to the decimal separator to pad",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 227,
              "column": 10
            },
            "end": {
              "line": 231,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "minimum-significant-digits",
          "description": "The minimum number of significant digits to use. Possible values are from 1 to 21; the default is 1.",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 69,
              "column": 10
            },
            "end": {
              "line": 71,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "maximum-significant-digits",
          "description": "The maximum number of significant digits to use. Possible values are from 1 to 21; the default is minimumSignificantDigits.",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 76,
              "column": 10
            },
            "end": {
              "line": 78,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "unit",
          "description": "unit of the output (only used when `number-style=\"decimal\"`)",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 83,
              "column": 10
            },
            "end": {
              "line": 85,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "unit-separator",
          "description": "the separator to separate value and unit",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 90,
              "column": 10
            },
            "end": {
              "line": 93,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "always-sign",
          "description": "always put the sign at the beginning",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 154,
              "column": 10
            },
            "end": {
              "line": 157,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "number-style",
          "description": "The formatting style to use. Is always `decimal` for `integer-input`.",
          "sourceRange": {
            "start": {
              "line": 22,
              "column": 10
            },
            "end": {
              "line": 27,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "use-grouping",
          "description": "if true the number will be grouped according to the locale.",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 115,
              "column": 10
            },
            "end": {
              "line": 117,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "currency",
          "description": "The currency to use in currency formatting. Possible values are the ISO 4217 currency codes, such as \"USD\" for the US dollar, \"EUR\" for the euro, or \"CNY\" for the Chinese RMB — see http://www.currency-iso.org/en/home/tables/table-a1.html. There is no default value; if the style is \"currency\", the currency property must be provided.",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 122,
              "column": 10
            },
            "end": {
              "line": 124,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "currency-display",
          "description": "How to display the currency in currency formatting. Possible values are \"symbol\" to use a localized currency symbol such as €, \"code\" to use the ISO currency code, \"name\" to use a localized currency name such as \"dollar\"; the default is \"symbol\".",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 129,
              "column": 10
            },
            "end": {
              "line": 131,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "format-number",
          "description": "number format function",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 144,
              "column": 10
            },
            "end": {
              "line": 148,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Function",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "parse-number",
          "description": "function to parse the input",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 153,
              "column": 10
            },
            "end": {
              "line": 157,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Function",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "min",
          "description": "minimal input",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 76,
              "column": 10
            },
            "end": {
              "line": 78,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "max",
          "description": "maximal input",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 83,
              "column": 10
            },
            "end": {
              "line": 85,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "step",
          "description": "step for changing the input (referencing to `min` or `0`)",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 91,
              "column": 10
            },
            "end": {
              "line": 94,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "step-mod",
          "description": "a step modifier. this is useful if you are having one step for multible elements that represent parts of numbers, like when you are having one input for the decimal part and one for the integer part.\nFor example:\n  * if `step` is `0.002` and the `step-mod` is `1000`, `2` will be used\n  * if `step` is `10` and the `step-mod` is `0.02`, `0.2` will be used",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 102,
              "column": 10
            },
            "end": {
              "line": 105,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "value",
          "description": "value of the input",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 50,
              "column": 10
            },
            "end": {
              "line": 53,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "default",
          "description": "default-value of the input",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 129,
              "column": 10
            },
            "end": {
              "line": 131,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "saturate",
          "description": "if true, the value does not revolve the range according to the maximum or the minimum",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 136,
              "column": 10
            },
            "end": {
              "line": 139,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "no-clamp",
          "description": "if true, the value does not clamp according to the given step",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 144,
              "column": 10
            },
            "end": {
              "line": 147,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "required",
          "description": "required attribute",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 16,
              "column": 10
            },
            "end": {
              "line": 20,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "invalid",
          "description": "required attribute",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 25,
              "column": 10
            },
            "end": {
              "line": 29,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "disabled",
          "description": "disables the input",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 34,
              "column": 10
            },
            "end": {
              "line": 38,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "name",
          "description": "name of the input",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 43,
              "column": 10
            },
            "end": {
              "line": 45,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "property-for-value",
          "description": "defines the property that should be used for the value",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 66,
              "column": 10
            },
            "end": {
              "line": 69,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "pad-length",
          "description": "length to pad the string (with `0`) according to the total amount of numbers",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 125,
              "column": 10
            },
            "end": {
              "line": 127,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "placeholder",
          "description": "placeholder string",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 133,
              "column": 10
            },
            "end": {
              "line": 135,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "no-auto-width",
          "description": "if set `true`, the attributes `min`, `max`, `start-at` and `default` won't be used to compute a mininmal width. `minlenght` and `placeholder` will still be used.",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 140,
              "column": 10
            },
            "end": {
              "line": 142,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "auto-resize",
          "description": "if set `true`, the input will be resized when you type in, but always when you confirm the input (by moving out or pressing enter)",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 147,
              "column": 10
            },
            "end": {
              "line": 149,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "auto-padding",
          "description": "enables auto padding",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 163,
              "column": 10
            },
            "end": {
              "line": 165,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "input",
          "description": "string value of the input",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 170,
              "column": 10
            },
            "end": {
              "line": 174,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "start-at",
          "description": "start where to increment the value",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 194,
              "column": 10
            },
            "end": {
              "line": 196,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "minlength",
          "description": "minimum character width of the input",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 201,
              "column": 10
            },
            "end": {
              "line": 204,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "hidden",
          "description": "",
          "sourceRange": {
            "file": "number-input.html",
            "start": {
              "line": 241,
              "column": 10
            },
            "end": {
              "line": 244,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "NumberInputMixin"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "mixins": [
        "NumberInputMixin"
      ]
    }
  ]
}
